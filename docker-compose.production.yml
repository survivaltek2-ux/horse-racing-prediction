version: '3.8'

services:
  app:
    build: .
    container_name: hrp-app-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - hrp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - db

  db:
    image: postgres:15-alpine
    container_name: hrp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hrp_database}
      POSTGRES_USER: ${POSTGRES_USER:-hrp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hrp_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - hrp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hrp_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: hrp-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static-html:/usr/share/nginx/html/static-html:ro
    depends_on:
      - app
    networks:
      - hrp-network

  redis:
    image: redis:7-alpine
    container_name: hrp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - hrp-network

networks:
  hrp-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: