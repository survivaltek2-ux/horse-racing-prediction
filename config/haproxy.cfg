global
    daemon
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # SSL Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 15s
    timeout http-keep-alive 15s
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE

# Frontend for HTTP traffic
frontend http_frontend
    bind *:80
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS traffic
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Route to backend
    default_backend app_servers

# Backend configuration for application servers
backend app_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Health check configuration
    default-server check inter 10s downinter 5s rise 3 fall 2 slowstart 60s maxconn 250 maxqueue 35 weight 100
    
    # Application instances
    server app1 app1:8000 check
    server app2 app2:8000 check
    server app3 app3:8000 check backup
    
    # Failover configuration
    option redispatch
    retries 3
    
    # Session persistence (if needed)
    # cookie SERVERID insert indirect nocache
    
    # Connection limits
    fullconn 4000

# Backend for database read operations (load balancing read replicas)
backend db_read_servers
    balance roundrobin
    option tcp-check
    tcp-check connect
    
    server postgres-primary postgres-primary:5432 check weight 50
    server postgres-replica postgres-replica:5432 check weight 100

# Backend for Redis operations
backend redis_servers
    balance first
    option tcp-check
    tcp-check connect
    
    server redis-primary redis-primary:6379 check
    server redis-replica redis-replica:6379 check backup

# Error pages backend
backend error_pages
    errorfile 503 /etc/haproxy/errors/503.http

# Monitoring endpoints
frontend monitoring
    bind *:9000
    acl is_prometheus path_beg /metrics
    acl is_health path_beg /health
    
    use_backend prometheus_metrics if is_prometheus
    use_backend health_check if is_health
    default_backend app_servers

backend prometheus_metrics
    server prometheus monitoring:9090 check

backend health_check
    http-request return status 200 content-type "application/json" string "{\"status\":\"healthy\",\"timestamp\":\"$(date)\",\"load_balancer\":\"haproxy\"}"